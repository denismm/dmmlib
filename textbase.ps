%!
% my text handling routines

/ConcatDict 3 dict def
/concatenate {
    ConcatDict begin
        /string2 exch def
        /string1 exch def
        /return_string string1 length string2 length add string def
        return_string 0 string1 putinterval
        return_string string1 length string2 putinterval
        return_string
    end
} def

/layout_dict 10 dict def
/center_base_show { % keep existing baseline, center horizontally
    dup stringwidth pop -2 div 0 moveto show
} def

/right_base_show { % show with right edge at 0, existing baseline
    dup stringwidth pop neg 0 moveto show
} def

/left_base_show { 0 0 moveto show } def

layout_dict begin
    /letter_v_center {
        /letter arg
        gsave
            newpath
            0 0 moveto
            letter true charpath pathbbox
        grestore
        exch pop add 2 div exch pop
        neg 0 exch translate
    } def
end
/X_center {
    layout_dict begin
        (X) letter_v_center
    end
} def

/x_center {
    layout_dict begin
        (x) letter_v_center
    end
} def

/Xj_center {
    layout_dict begin
        (Xj) letter_v_center
    end
} def

/width_line_show {
    % show string in width, compressing if needed
    layout_dict begin
	/show_func arg
	/linewidth arg
	/line arg
	gsave
	    line stringwidth pop linewidth gt {
		line stringwidth pop linewidth exch div 1 scale
	    } if
	    line show_func
	grestore
    end
} def

/multiline_width_show {
    layout_dict begin
        /show_func arg
        /height arg
        /linewidth arg
        /lines arg
        /allwidth 0 def
        lines {
            stringwidth pop allwidth maximum /allwidth arg
        } forall
        gsave
	    allwidth linewidth gt {
		linewidth allwidth div 1 scale
	    } if
            lines {
                show_func
                0 height neg translate
            } forall
        grestore
    end
} def

/width_height_line_show {
    % as above but scale instead of compressing
    layout_dict begin
	/show_func arg
	/linewidth arg
	/line arg
	gsave
	    line stringwidth pop linewidth gt {
		line stringwidth pop linewidth exch div dup scale
	    } if
	    line show_func
	grestore
    end
} def

/overflow_style /compress def

/paragraph_show {
    % show paragraph, wrapping lines and compressing long words
    % return number of lines used
    layout_dict begin
        /show_func arg
        /lineheight arg
        /linewidth arg
        /paragraph arg
        /linesused 0 def
	overflow_style /compress eq {
	    /internal_show 
	    {
		gsave
		    dup stringwidth pop linewidth gt {
			dup stringwidth pop linewidth exch div 1 scale
		    } if
		    show_func
		grestore
	    } def
	} { 
	    { show_func } def
	} ifelse
        gsave
	    % look for newlines
	    {
		paragraph (\n) search
		{
		    % newline found
		    /subparagraph exch def
		    pop
		    /paragraph exch def
		} {
		    /subparagraph exch def
		    /paragraph () def
		} ifelse
		/line_buffer () def
		% look for spaces
		{
		    subparagraph ( ) search
		    {
			% space found
			/new_word exch def
			pop % space
			/subparagraph exch def
		    } {
			% no space found
			/new_word exch def
			/subparagraph () def
		    } ifelse
		    line_buffer length 0 gt {
			line_buffer ( ) concatenate
		    } {
			line_buffer
		    } ifelse
		    new_word concatenate
		    dup stringwidth pop linewidth gt {
			% new word makes it too long
			pop
			line_buffer length 0 gt {
			    line_buffer internal_show
			    0 lineheight neg translate
			    /linesused linesused 1 add def
			} if
			/line_buffer new_word def
		    }{
			/line_buffer exch def
		    } ifelse
		    subparagraph length 0 eq
		    {
			line_buffer internal_show
			/linesused linesused 1 add def
			0 lineheight neg translate
			exit
		    } if
		} loop
		paragraph length 0 eq {
		    exit
		}{
		} ifelse
	    } loop
        grestore
        linesused
    end
} def

/circle_center_show {
    layout_dict begin gsave
        /r arg
        /text_to_show arg
        /sentinel
        /width text_to_show stringwidth pop def
        /full_angle width 3.14159 r mul div 180 mul def
        full_angle 2 div rotate

        % 0 0 r namefontsize 0.75 mul half sub 90 90 full_angle sub arcn
        % 0 0 r namefontsize 0.75 mul half add 90 full_angle sub 90 arc
        % whitefill newpath

        % rotation per character is full_angle * (charwidth / width)
        /rot_per_unit width 0 gt {
            full_angle width div 
        } {
            0
        } ifelse def
        /minibuf ( ) def
        text_to_show {
            /char_to_show arg
            minibuf 0 char_to_show put
            /charwidth minibuf stringwidth pop def
            /half_rot charwidth rot_per_unit mul 2 div def
            half_rot neg rotate
            gsave
                0 r translate
                X_center
                minibuf center_base_show
            grestore
            half_rot neg rotate
        } forall
    grestore end
    dup /sentinel eq {
        pop
    } {
        die
    } ifelse
} def

/circular_balloon_show_base {
    layout_dict begin
        /draw arg /radius arg /text_height arg /paragraph arg
        draw {
            /internal_show {
                gsave
                    0 line_pos translate
                    line_buffer line_width {center_base_show} width_line_show
                grestore
            } def
        } {
            /internal_show { } def
        } ifelse
        /lines radius 2 mul text_height div cvi def

        /topline lines half 0.5 sub def
        /lastline topline neg def
        /line_i topline def
        % trim invisible characters off the back of paragraph
        /text_len paragraph length def
        {
            paragraph text_len 1 sub get dup 32 eq exch 10 eq or {
                /text_len -1 adddef
            } {
                exit
            } ifelse
        } loop
        /paragraph paragraph 0 text_len getinterval def
        /subparagraph () def
        /line_buffer () def
        {
            paragraph (\n) search {
                /subparagraph arg pop /paragraph arg
            } {
                /subparagraph arg /paragraph () def
            } ifelse
            /line_buffer () def
            {
                /line_pos line_i text_height mul def
                /line_half_width radius dup mul line_pos dup mul sub sqrt def
                /line_width line_half_width 2 mul def
                subparagraph ( ) search {
                    /new_word arg pop /subparagraph arg
                } {
                    /new_word arg /subparagraph () def
                } ifelse
                line_buffer length 0 gt {
                    line_buffer ( ) concatenate
                } {
                    line_buffer
                } ifelse
                new_word concatenate
                dup stringwidth pop line_width gt {
                    pop
                    line_buffer length 0 gt {
                        internal_show
                        /line_i -1 adddef
                    } if
                    /line_buffer new_word def
                } {
                    /line_buffer exch def
                    subparagraph length 0 eq {
                        internal_show
                        /line_i -1 adddef
                        exit
                    } if
                } ifelse
                line_i lastline lt { exit } if
            } loop
            line_i lastline lt { exit } if
            paragraph length 0 eq { exit } if
        } loop
        % if we filled circle, line_i should be one less than lastline
        % if we didn't finish text, there will be leftover in subparagraph and/or paragraph
        lastline line_i sub 1 sub
        dup 0 ge {
            pop subparagraph length paragraph length add line_buffer length add
        } if
    end
} def

/circular_balloon_show { true circular_balloon_show_base } def

/find_circular_balloon_radius {
    layout_dict begin
        /text_height arg /test_paragraph arg
        /loops 0 def
        /a_rad test_paragraph stringwidth pop text_height mul PI div sqrt def
        /radius_test { /test_radius arg
            test_paragraph text_height test_radius false circular_balloon_show_base
        } def
        /rad_step text_height def
        {
            /a_val a_rad radius_test def
            a_val 0 eq {
                exit
            } if
            /a_sign a_val dup abs div def
            /b_rad a_rad rad_step a_sign mul add def
            /b_val b_rad radius_test def
            b_val 0 eq {
                /a_rad b_rad def
                exit
            } if
            /b_sign b_val dup abs div def
            b_sign a_sign eq {
                /a_rad b_rad def
            } {
                /a_rad a_rad b_rad add half def
                /rad_step rad_step half def
            } ifelse
            /loops 1 adddef
            loops 100 gt rad_step currentlinewidth lt or {
                /a_rad a_rad b_rad max def
                exit
            } if
        } loop
        a_rad
    end
} def


/change_encoding_dict 5 dict def
% args:
% existing fontname (like /Times),
% encoding (like ISOLatin1Encoding)
% new fontname (like /Times-ISO)
% defines font in current dict
/change_encoding {
    change_encoding_dict begin
	/newfont arg
	/newencoding arg
	/basefont arg

	basefont findfont
	dup length dict begin
	    {
		1 index /FID ne {def} {pop pop} ifelse
	    } forall
	    /Encoding newencoding def
	    currentdict
	end
	newfont exch 
    end

    definefont

} def

